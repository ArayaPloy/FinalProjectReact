generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model academicclubattendance {
  id                 Int                @id @default(autoincrement())
  clubId             Int?
  date               DateTime?          @db.Date
  studentId          Int?
  statusId           Int
  summary            String?            @db.Text
  imagePath          String?            @db.VarChar(255)
  recorderId         Int?
  createdAt          DateTime           @default(now()) @db.Timestamp(0)
  updatedAt          DateTime           @default(now()) @db.Timestamp(0)
  isDeleted          Boolean?           @default(false)
  deletedAt          DateTime?          @db.Timestamp(0)
  updatedBy          Int?
  academicclubs      academicclubs?     @relation(fields: [clubId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "academicclubattendance_ibfk_1")
  students           students?          @relation(fields: [studentId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "academicclubattendance_ibfk_2")
  attendancestatuses attendancestatuses @relation(fields: [statusId], references: [id], onUpdate: Restrict, map: "academicclubattendance_ibfk_3")
  teachers           teachers?          @relation(fields: [recorderId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "academicclubattendance_ibfk_4")
  users              users?             @relation(fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "academicclubattendance_ibfk_5")

  @@index([clubId], map: "clubId")
  @@index([recorderId], map: "recorderId")
  @@index([statusId], map: "statusId")
  @@index([studentId], map: "studentId")
  @@index([updatedBy], map: "updatedBy")
}

model academicclubs {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(100)
  description            String?                  @db.Text
  maxMembers             Int?
  teacherId              Int?
  createdAt              DateTime                 @default(now()) @db.Timestamp(0)
  updatedAt              DateTime                 @default(now()) @db.Timestamp(0)
  deletedAt              DateTime?                @db.Timestamp(0)
  updatedBy              Int?
  category               String                   @db.VarChar(100)
  icon                   String                   @db.VarChar(50)
  registrationDeadline   DateTime                 @db.Date
  isActive               Boolean                  @default(true)
  meetingDay             String?                  @db.VarChar(20)
  meetingTime            String?                  @db.VarChar(20)
  location               String?                  @db.VarChar(100)
  requirements           String?                  @db.Text
  academicclubattendance academicclubattendance[]
  teachers               teachers?                @relation(fields: [teacherId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "academicclubs_ibfk_1")
  users                  users?                   @relation(fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "academicclubs_ibfk_2")

  @@index([teacherId], map: "teacherId")
  @@index([updatedBy], map: "updatedBy")
}

model admins {
  id        Int       @id @default(autoincrement())
  teacherId Int       @unique(map: "teacherId")
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  isDeleted Boolean?  @default(false)
  deletedAt DateTime? @db.Timestamp(0)
  updatedBy Int?
  teachers  teachers  @relation(fields: [teacherId], references: [id], onUpdate: Restrict, map: "admins_ibfk_1")
  users     users?    @relation(fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "admins_ibfk_2")

  @@index([updatedBy], map: "updatedBy")
}

model attendancestatuses {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique(map: "name") @db.VarChar(50)
  createdAt              DateTime                 @default(now()) @db.Timestamp(0)
  updatedAt              DateTime                 @default(now()) @db.Timestamp(0)
  isDeleted              Boolean?                 @default(false)
  deletedAt              DateTime?                @db.Timestamp(0)
  updatedBy              Int?
  academicclubattendance academicclubattendance[]
  users                  users?                   @relation(fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "attendancestatuses_ibfk_1")
  flagpoleattendance     flagpoleattendance[]
  homeroomattendance     homeroomattendance[]

  @@index([updatedBy], map: "updatedBy")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model blogs {
  id                           Int        @id @default(autoincrement())
  title                        String     @db.VarChar(255)
  description                  String?    @db.Text
  coverImg                     String?    @db.VarChar(255)
  content                      String?    @db.LongText
  category                     String?    @db.VarChar(100)
  author                       Int?
  createdAt                    DateTime   @default(now()) @db.Timestamp(0)
  updatedAt                    DateTime   @default(now()) @db.Timestamp(0)
  isDeleted                    Boolean?   @default(false)
  deletedAt                    DateTime?  @db.Timestamp(0)
  updatedBy                    Int?
  users_blogs_authorTousers    users?     @relation("blogs_authorTousers", fields: [author], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "blogs_ibfk_1")
  users_blogs_updatedByTousers users?     @relation("blogs_updatedByTousers", fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "blogs_ibfk_2")
  comments                     comments[]

  @@index([author], map: "author")
  @@index([updatedBy], map: "updatedBy")
}

model classschedules {
  id          Int         @id @default(autoincrement())
  class       String      @db.VarChar(50)
  subjectId   Int?
  teacherId   Int?
  dayOfWeekId Int?
  room        String?     @db.VarChar(50)
  createdAt   DateTime    @default(now()) @db.Timestamp(0)
  updatedAt   DateTime    @default(now()) @db.Timestamp(0)
  deletedAt   DateTime?   @db.Timestamp(0)
  updatedBy   Int?
  subjects    subjects?   @relation(fields: [subjectId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "classschedules_ibfk_1")
  teachers    teachers?   @relation(fields: [teacherId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "classschedules_ibfk_2")
  daysofweek  daysofweek? @relation(fields: [dayOfWeekId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "classschedules_ibfk_3")
  users       users?      @relation(fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "classschedules_ibfk_4")

  @@index([dayOfWeekId], map: "dayOfWeekId")
  @@index([subjectId], map: "subjectId")
  @@index([teacherId], map: "teacherId")
  @@index([updatedBy], map: "updatedBy")
}

model comments {
  id        Int       @id @default(autoincrement())
  comment   String    @db.Text
  userId    Int
  postId    Int
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  deletedAt DateTime? @db.Timestamp(0)
  users     users     @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "comments_ibfk_1")
  blogs     blogs     @relation(fields: [postId], references: [id], onUpdate: Restrict, map: "comments_ibfk_2")

  @@index([postId], map: "postId")
  @@index([userId], map: "userId")
}

model daysofweek {
  id             Int              @id @default(autoincrement())
  name           String           @unique(map: "name") @db.VarChar(20)
  createdAt      DateTime         @default(now()) @db.Timestamp(0)
  updatedAt      DateTime         @default(now()) @db.Timestamp(0)
  deletedAt      DateTime?        @db.Timestamp(0)
  classschedules classschedules[]
}

model departments {
  id                                           Int        @id @default(autoincrement())
  name                                         String     @db.VarChar(100)
  headTeacherId                                Int?       @unique(map: "headTeacherId")
  createdAt                                    DateTime   @default(now()) @db.Timestamp(0)
  updatedAt                                    DateTime   @default(now()) @db.Timestamp(0)
  deletedAt                                    DateTime?  @db.Timestamp(0)
  teachers_departments_headTeacherIdToteachers teachers?  @relation("departments_headTeacherIdToteachers", fields: [headTeacherId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "departments_ibfk_1")
  subjects                                     subjects[]
  teachers_teachers_departmentIdTodepartments  teachers[] @relation("teachers_departmentIdTodepartments")
}

model flagpoleattendance {
  id                 Int                @id @default(autoincrement())
  studentId          Int?
  date               DateTime?          @db.Date
  statusId           Int
  recorderId         Int?
  createdAt          DateTime           @default(now()) @db.Timestamp(0)
  updatedAt          DateTime           @default(now()) @db.Timestamp(0)
  deletedAt          DateTime?          @db.Timestamp(0)
  updatedBy          Int?
  students           students?          @relation(fields: [studentId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "flagpoleattendance_ibfk_1")
  attendancestatuses attendancestatuses @relation(fields: [statusId], references: [id], onUpdate: Restrict, map: "flagpoleattendance_ibfk_2")
  recorder           users?             @relation("flagpoleattendance_recorder", fields: [recorderId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "flagpoleattendance_ibfk_3")
  users              users?             @relation(fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "flagpoleattendance_ibfk_4")

  @@index([recorderId], map: "recorderId")
  @@index([statusId], map: "statusId")
  @@index([studentId], map: "studentId")
  @@index([updatedBy], map: "updatedBy")
}

model genders {
  id         Int          @id @default(autoincrement())
  genderName String       @unique(map: "genderName") @db.VarChar(20)
  createdAt  DateTime     @default(now()) @db.Timestamp(0)
  updatedAt  DateTime     @default(now()) @db.Timestamp(0)
  deletedAt  DateTime?    @db.Timestamp(0)
  students   students[]
  superadmin superadmin[]
  teachers   teachers[]
}

model homeroomattendance {
  id                                                      Int                @id @default(autoincrement())
  homeroomTeacherId                                       Int?
  studentId                                               Int?
  date                                                    DateTime           @db.Date
  statusId                                                Int
  topic                                                   String?            @db.Text
  summary                                                 String?            @db.Text
  recorderId                                              Int?
  createdAt                                               DateTime           @default(now()) @db.Timestamp(0)
  updatedAt                                               DateTime           @default(now()) @db.Timestamp(0)
  isDeleted                                               Boolean?           @default(false)
  deletedAt                                               DateTime?          @db.Timestamp(0)
  updatedBy                                               Int?
  teachers_homeroomattendance_homeroomTeacherIdToteachers teachers?          @relation("homeroomattendance_homeroomTeacherIdToteachers", fields: [homeroomTeacherId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "homeroomattendance_ibfk_1")
  students                                                students?          @relation(fields: [studentId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "homeroomattendance_ibfk_2")
  attendancestatuses                                      attendancestatuses @relation(fields: [statusId], references: [id], onUpdate: Restrict, map: "homeroomattendance_ibfk_3")
  teachers_homeroomattendance_recorderIdToteachers        teachers?          @relation("homeroomattendance_recorderIdToteachers", fields: [recorderId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "homeroomattendance_ibfk_4")
  users                                                   users?             @relation(fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "homeroomattendance_ibfk_5")

  @@unique([homeroomTeacherId, studentId, date], map: "HomeroomAttendance_index_0")
  @@index([recorderId], map: "recorderId")
  @@index([statusId], map: "statusId")
  @@index([studentId], map: "studentId")
  @@index([updatedBy], map: "updatedBy")
}

model homeroomteacherstudent {
  homeroomTeacherId Int
  studentId         Int
  createdAt         DateTime  @default(now()) @db.Timestamp(0)
  updatedAt         DateTime  @default(now()) @db.Timestamp(0)
  deletedAt         DateTime? @db.Timestamp(0)
  teachers          teachers  @relation(fields: [homeroomTeacherId], references: [id], onUpdate: Restrict, map: "homeroomteacherstudent_ibfk_1")
  students          students  @relation(fields: [studentId], references: [id], onUpdate: Restrict, map: "homeroomteacherstudent_ibfk_2")

  @@id([homeroomTeacherId, studentId])
  @@index([studentId], map: "studentId")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model homevisit_files {
  id          Int                       @id @default(autoincrement())
  homeVisitId Int
  fileName    String                    @db.VarChar(255)
  filePath    String                    @db.VarChar(500)
  fileUrl     String                    @db.VarChar(500)
  fileSize    Int
  mimeType    String                    @db.VarChar(100)
  fileType    homevisit_files_fileType? @default(gallery_image)
  uploadedAt  DateTime                  @default(now()) @db.Timestamp(0)
  uploadedBy  Int?
  isDeleted   Boolean?                  @default(false)
  deletedAt   DateTime?                 @db.Timestamp(0)
  users       users?                    @relation(fields: [uploadedBy], references: [id], onUpdate: Restrict, map: "fk_homevisit_files_uploader")
  homevisits  homevisits                @relation(fields: [homeVisitId], references: [id], onDelete: Cascade, map: "fk_homevisit_files_visit")

  @@index([uploadedBy], map: "fk_homevisit_files_uploader")
  @@index([isDeleted], map: "idx_homevisit_files_deleted")
  @@index([fileType], map: "idx_homevisit_files_type")
  @@index([homeVisitId], map: "idx_homevisit_files_visit")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model homevisits {
  id                    Int               @id @default(autoincrement())
  teacherId             Int?
  studentId             Int?
  updatedBy             Int?
  visitDate             DateTime?         @db.Date
  teacherName           String?           @db.VarChar(255)
  studentIdNumber       String?           @db.VarChar(50)
  studentName           String?           @db.VarChar(255)
  studentBirthDate      DateTime?         @db.Date
  className             String?           @db.VarChar(100)
  parentName            String?           @db.VarChar(255)
  relationship          String?           @db.VarChar(100)
  occupation            String?           @db.VarChar(255)
  monthlyIncome         String?           @db.VarChar(100)
  familyStatus          String?           @db.LongText
  mainAddress           String?           @db.Text
  phoneNumber           String?           @db.VarChar(20)
  emergencyContact      String?           @db.VarChar(20)
  houseType             String?           @db.LongText
  houseMaterial         String?           @db.LongText
  utilities             String?           @db.LongText
  environmentCondition  String?           @db.Text
  studyArea             String?           @db.VarChar(255)
  visitPurpose          String?           @db.LongText
  studentBehaviorAtHome String?           @db.Text
  parentCooperation     String?           @db.Text
  problems              String?           @db.Text
  recommendations       String?           @db.Text
  followUpPlan          String?           @db.Text
  summary               String?           @db.Text
  notes                 String?           @db.Text
  imagePath             String?           @db.VarChar(500)
  imageGallery          String?           @db.LongText
  createdAt             DateTime          @default(now()) @db.Timestamp(0)
  updatedAt             DateTime          @default(now()) @db.Timestamp(0)
  isDeleted             Boolean?          @default(false)
  deletedAt             DateTime?         @db.Timestamp(0)
  homevisit_files       homevisit_files[]
  students              students?         @relation(fields: [studentId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_homevisits_student")
  teachers              teachers?         @relation(fields: [teacherId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_homevisits_teacher")
  users                 users?            @relation(fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_homevisits_updatedby")

  @@index([isDeleted, deletedAt], map: "idx_homevisits_deleted")
  @@index([studentId], map: "idx_homevisits_student")
  @@index([studentIdNumber], map: "idx_homevisits_student_id_number")
  @@index([studentName], map: "idx_homevisits_student_name")
  @@index([teacherId], map: "idx_homevisits_teacher")
  @@index([updatedBy], map: "idx_homevisits_updated_by")
  @@index([visitDate], map: "idx_homevisits_visit_date")
}

model school_info {
  id              Int       @id @default(autoincrement())
  name            String    @default("โรงเรียนท่าบ่อพิทยาคม") @db.VarChar(255)
  location        String?   @db.Text
  foundedDate     String?   @db.VarChar(50)
  currentDirector String?   @db.VarChar(255)
  education_level String?   @db.VarChar(255)
  department      String?   @db.VarChar(255)
  description     String?   @db.Text
  heroImage       String?   @db.VarChar(500)
  director_image  String?   @db.VarChar(500)
  director_quote  String?   @db.Text
  createdAt       DateTime  @default(now()) @db.Timestamp(0)
  updatedAt       DateTime  @default(now()) @db.Timestamp(0)
  createdBy       Int
  updatedBy       Int
  isDeleted       Boolean?  @default(false)
  deletedAt       DateTime? @db.Timestamp(0)
  deletedBy       Int?
}

model school_timeline {
  id          Int       @id @default(autoincrement())
  year        Int
  date        String?   @db.VarChar(50)
  title       String    @db.VarChar(255)
  description String?   @db.Text
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  updatedAt   DateTime  @default(now()) @db.Timestamp(0)
  createdBy   Int
  updatedBy   Int
  isDeleted   Boolean?  @default(false)
  deletedAt   DateTime? @db.Timestamp(0)
  deletedBy   Int?
}

model studentbehaviorscores {
  id         Int       @id @default(autoincrement())
  studentId  Int?
  score      Int
  comments   String?   @db.Text
  recorderId Int?
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  updatedAt  DateTime  @default(now()) @db.Timestamp(0)
  isDeleted  Boolean?  @default(false)
  deletedAt  DateTime? @db.Timestamp(0)
  updatedBy  Int?
  students   students? @relation(fields: [studentId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "studentbehaviorscores_ibfk_1")
  teachers   teachers? @relation(fields: [recorderId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "studentbehaviorscores_ibfk_2")
  users      users?    @relation(fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "studentbehaviorscores_ibfk_3")

  @@index([recorderId], map: "recorderId")
  @@index([studentId], map: "studentId")
  @@index([updatedBy], map: "updatedBy")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model students {
  id                              Int                      @id @default(autoincrement())
  namePrefix                      String?                  @db.VarChar(10)
  fullName                        String                   @db.VarChar(255)
  genderId                        Int
  classRoom                       String                   @db.VarChar(50)
  studentNumber                   Int?
  homeroomTeacherId               Int?
  guardianName                    String?                  @db.VarChar(255)
  guardianRelation                String?                  @db.VarChar(50)
  createdAt                       DateTime?                @default(now()) @db.Timestamp(0)
  updatedAt                       DateTime?                @default(now()) @db.Timestamp(0)
  isDeleted                       Boolean?                 @default(false)
  deletedAt                       DateTime?                @db.Timestamp(0)
  updatedBy                       Int?
  dob                             DateTime?                @db.Date
  nationality                     String?                  @db.VarChar(50)
  weight                          Int?
  height                          Int?
  disease                         String?                  @db.VarChar(50)
  phoneNumber                     String?                  @db.VarChar(50)
  academicclubattendance          academicclubattendance[]
  flagpoleattendance              flagpoleattendance[]
  homeroomattendance              homeroomattendance[]
  homeroomteacherstudent          homeroomteacherstudent[]
  homevisits                      homevisits[]
  studentbehaviorscores           studentbehaviorscores[]
  genders                         genders                  @relation(fields: [genderId], references: [id], onUpdate: Restrict, map: "students_ibfk_2")
  teachers                        teachers?                @relation(fields: [homeroomTeacherId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "students_ibfk_3")
  users_students_updatedByTousers users?                   @relation("students_updatedByTousers", fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "students_ibfk_4")

  @@index([genderId], map: "genderId")
  @@index([homeroomTeacherId], map: "homeroomTeacherId")
  @@index([updatedBy], map: "updatedBy")
}

model subjects {
  id              Int               @id @default(autoincrement())
  codeSubject     String            @unique(map: "codeSubject") @db.VarChar(10)
  name            String            @db.VarChar(100)
  description     String?           @db.Text
  departmentId    Int?
  createdAt       DateTime          @default(now()) @db.Timestamp(0)
  updatedAt       DateTime          @default(now()) @db.Timestamp(0)
  deletedAt       DateTime?         @db.Timestamp(0)
  updatedBy       Int?
  classschedules  classschedules[]
  departments     departments?      @relation(fields: [departmentId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "subjects_ibfk_1")
  users           users?            @relation(fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "subjects_ibfk_2")
  teachersubjects teachersubjects[]

  @@index([departmentId], map: "departmentId")
  @@index([updatedBy], map: "updatedBy")
}

model superadmin {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique(map: "userId")
  namePrefix  String?   @db.VarChar(10)
  fullName    String    @db.VarChar(255)
  genderId    Int
  phoneNumber String?   @db.VarChar(10)
  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  updatedAt   DateTime  @default(now()) @db.Timestamp(0)
  isDeleted   Boolean?  @default(false)
  deletedAt   DateTime? @db.Timestamp(0)
  users       users     @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "superadmin_ibfk_1")
  genders     genders   @relation(fields: [genderId], references: [id], onUpdate: Restrict, map: "superadmin_ibfk_2")

  @@index([genderId], map: "genderId")
}

model teachers {
  id                                                                Int                      @id @default(autoincrement())
  teacherId                                                         Int?                      @unique(map: "userId")
  userId                                                            Int?
  departmentId                                                      Int?
  namePrefix                                                        String?                  @db.VarChar(10)
  fullName                                                          String                   @db.VarChar(255)
  genderId                                                          Int
  dob                                                               DateTime?                @db.Date
  nationality                                                       String?                  @db.VarChar(50)
  position                                                          String?                  @db.VarChar(50)
  level                                                             String?                  @db.VarChar(50)
  phoneNumber                                                       String?                  @db.VarChar(10)
  createdAt                                                         DateTime                 @default(now()) @db.Timestamp(0)
  updatedAt                                                         DateTime                 @default(now()) @db.Timestamp(0)
  isDeleted                                                         Boolean?                 @default(false)
  deletedAt                                                         DateTime?                @db.Timestamp(0)
  updatedBy                                                         Int?
  imagePath                                                         String                   @db.VarChar(100)
  email                                                             String                   @db.VarChar(100)
  address                                                           String                   @db.Text
  education                                                         String                   @db.VarChar(100)
  major                                                             String                   @db.VarChar(100)
  biography                                                         String                   @db.Text
  specializations                                                   String                   @db.Text
  academicclubattendance                                            academicclubattendance[]
  academicclubs                                                     academicclubs[]
  admins                                                            admins?
  classschedules                                                    classschedules[]
  departments_departments_headTeacherIdToteachers                   departments?             @relation("departments_headTeacherIdToteachers")
  homeroomattendance_homeroomattendance_homeroomTeacherIdToteachers homeroomattendance[]     @relation("homeroomattendance_homeroomTeacherIdToteachers")
  homeroomattendance_homeroomattendance_recorderIdToteachers        homeroomattendance[]     @relation("homeroomattendance_recorderIdToteachers")
  homeroomteacherstudent                                            homeroomteacherstudent[]
  homevisits                                                        homevisits[]
  studentbehaviorscores                                             studentbehaviorscores[]
  students                                                          students[]
  users_teachers_teacherIdTousers                                   users?                    @relation("teachers_teacherIdTousers", fields: [teacherId], references: [id], onUpdate: Restrict, map: "teachers_ibfk_1")
  departments_teachers_departmentIdTodepartments                    departments?             @relation("teachers_departmentIdTodepartments", fields: [departmentId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "teachers_ibfk_2")
  genders                                                           genders                  @relation(fields: [genderId], references: [id], onUpdate: Restrict, map: "teachers_ibfk_3")
  users_teachers_updatedByTousers                                   users?                   @relation("teachers_updatedByTousers", fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "teachers_ibfk_4")
  teachersubjects                                                   teachersubjects[]

  @@index([departmentId], map: "departmentId")
  @@index([genderId], map: "genderId")
  @@index([updatedBy], map: "updatedBy")
}

model teachersubjects {
  teacherId Int
  subjectId Int
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  deletedAt DateTime? @db.Timestamp(0)
  teachers  teachers  @relation(fields: [teacherId], references: [id], onUpdate: Restrict, map: "teachersubjects_ibfk_1")
  subjects  subjects  @relation(fields: [subjectId], references: [id], onUpdate: Restrict, map: "teachersubjects_ibfk_2")

  @@id([teacherId, subjectId])
  @@index([subjectId], map: "subjectId")
}

model userroles {
  id        Int       @id @default(autoincrement())
  roleName  String    @unique(map: "roleName") @db.VarChar(50)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  deletedAt DateTime? @db.Timestamp(0)
  users     users[]
}

model users {
  id                                 Int                      @id @default(autoincrement())
  username                           String                   @unique(map: "username") @db.VarChar(255)
  email                              String                   @unique(map: "email") @db.VarChar(255)
  password                           String                   @db.VarChar(255)
  roleId                             Int
  createdAt                          DateTime                 @default(now()) @db.Timestamp(0)
  updatedAt                          DateTime                 @default(now()) @db.Timestamp(0)
  isDeleted                          Boolean?                 @default(false)
  deletedAt                          DateTime?                @db.Timestamp(0)
  updatedBy                          Int?
  academicclubattendance             academicclubattendance[]
  academicclubs                      academicclubs[]
  admins                             admins[]
  attendancestatuses                 attendancestatuses[]
  blogs_blogs_authorTousers          blogs[]                  @relation("blogs_authorTousers")
  blogs_blogs_updatedByTousers       blogs[]                  @relation("blogs_updatedByTousers")
  classschedules                     classschedules[]
  comments                           comments[]
  flagpoleattendance_recorder        flagpoleattendance[]     @relation("flagpoleattendance_recorder")
  flagpoleattendance                 flagpoleattendance[]
  homeroomattendance                 homeroomattendance[]
  homevisit_files                    homevisit_files[]
  homevisits                         homevisits[]
  studentbehaviorscores              studentbehaviorscores[]
  students_students_updatedByTousers students[]               @relation("students_updatedByTousers")
  subjects                           subjects[]
  superadmin                         superadmin?
  teachers_teachers_teacherIdTousers teachers?                @relation("teachers_teacherIdTousers")
  teachers_teachers_updatedByTousers teachers[]               @relation("teachers_updatedByTousers")
  userroles                          userroles                @relation(fields: [roleId], references: [id], onUpdate: Restrict, map: "users_ibfk_1")
  users                              users?                   @relation("usersTousers", fields: [updatedBy], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_ibfk_2")
  other_users                        users[]                  @relation("usersTousers")

  @@index([roleId], map: "roleId")
  @@index([updatedBy], map: "updatedBy")
}

enum homevisit_files_fileType {
  main_image
  gallery_image
  document
}
